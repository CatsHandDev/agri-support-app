services:
  db:
    image: postgres:15 # バージョンは適宜選択
    container_name: agri_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql # 初期化SQLがあれば
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-agri_db}
      POSTGRES_USER: ${POSTGRES_USER:-agri_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-agri_password}
    ports:
      - "5432:5432" # ローカルから直接接続する場合
    networks:
      - app_network

  search:
    image: elasticsearch:8.11.3 # バージョンは適宜選択
    container_name: agri_search
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false # 開発環境では無効化することが多い
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m" # メモリ割り当て
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - app_network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: agri_backend
    command: /app/entrypoint.sh # entrypoint.sh でマイグレーションなどを実行後、gunicornを起動
    volumes:
      - ./backend:/app
      # - static_volume:/app/staticfiles # Nginxを使う場合に共有
      - ./backend/media:/app/media # メディアファイルの永続化
    expose:
      - 8000
    ports:
      - "8000:8000"
    environment:
      - PYTHONUNBUFFERED=1
      - DJANGO_SETTINGS_MODULE=config.settings # 開発用設定を指定
      - POSTGRES_DB=${POSTGRES_DB:-agri_db}
      - POSTGRES_USER=${POSTGRES_USER:-agri_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-agri_password}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - ELASTICSEARCH_HOST=search
      - ELASTICSEARCH_PORT=9200
      # 他に必要な環境変数 (SECRET_KEY, DEBUGなど)
    depends_on:
      - db
      - search
    networks:
      - app_network
    # ports: # 通常はNginx経由にするが、直接アクセス確認用に一時的に公開も可
    #   - "8000:8000"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      # target: development # マルチステージビルドで開発用ステージを使う場合
    container_name: agri_frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules # パフォーマンスのためnode_modulesはホストと共有しない
      - /app/.next
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api # バックエンドAPIのURL (Nginx経由の場合は変更)
      # 他に必要な環境変数
    depends_on:
      - backend
    networks:
      - app_network
    stdin_open: true # Next.jsのホットリロードに必要
    tty: true        # Next.jsのホットリロードに必要

  # (オプション) Nginx: リバースプロキシ、静的ファイル配信
  # nginx:
  #   image: nginx:stable-alpine
  #   container_name: agri_nginx
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro # Nginx設定ファイル
  #     - static_volume:/app/staticfiles # Djangoの静的ファイル
  #     - media_volume:/app/media # Djangoのメディアファイル
  #   depends_on:
  #     - backend
  #     - frontend
  #   networks:
  #     - app_network

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
  elasticsearch_data:
  static_volume:
  # media_volume: